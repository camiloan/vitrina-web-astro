---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";

// 1. Obtenemos todos los items de la colección
const allShowcaseItems = await getCollection("showcase");

// 2. Obtenemos una lista única de tecnologías para los botones de filtro
const allTechs = [...new Set(allShowcaseItems.map((item) => item.data.tech))];
---

<Layout title="Mi Vitrina de Componentes">
	<main class="container mx-auto p-4 md:p-8">
		<div class="text-center mb-12">
			<h1 class="text-5xl font-bold mb-2">Mi Vitrina de Componentes</h1>
			<p class="text-xl text-base-content/70">
				Una colección de hallazgos de frontend.
			</p>
		</div>

		<div
			class="flex flex-col md:flex-row gap-4 justify-center items-center mb-12"
		>
			<input
				type="search"
				id="search-input"
				placeholder="Buscar componente..."
				class="input w-full md:w-auto"
			/>
			<div class="flex flex-wrap justify-center gap-2">
				<button class="btn btn-primary filter-btn" data-tech="all"
					>Todos</button
				>
				{
					allTechs.map((tech) => (
						<button class="btn filter-btn" data-tech={tech}>
							{tech}
						</button>
					))
				}
			</div>
		</div>

		<div
			class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
			id="component-grid"
		>
			{
				allShowcaseItems.map((item) => (
					<a
						href={`/showcase/${item.slug}`}
						class="card bg-base-100 shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1"
						data-title={item.data.title}
						data-tech={item.data.tech}
					>
						<div class="card-body">
							<h2 class="card-title">{item.data.title}</h2>
							<p class="text-base-content/70">
								{item.data.description}
							</p>
							<div class="card-actions justify-end mt-4">
								<div class="badge badge-outline">
									{item.data.tech}
								</div>
							</div>
						</div>
					</a>
				))
			}
		</div>
	</main>
</Layout>
<script>
	// Se envuelve toda la lógica en una función para asegurar que se ejecuta
	// solo cuando la página ha cargado.
	function setupFilters() {
		// Se especifica el tipo exacto para que TypeScript conozca la propiedad .value
		const searchInput = document.getElementById(
			"search-input",
		) as HTMLInputElement | null;

		// Si el input de búsqueda no existe, no hacemos nada.
		// Esto resuelve el error "'searchInput' is possibly 'null'".
		if (!searchInput) {
			return;
		}

		const filterButtons =
			document.querySelectorAll<HTMLButtonElement>(".filter-btn");
		const componentCards =
			document.querySelectorAll<HTMLAnchorElement>(".card");
		let currentTechFilter = "all";

		// Función principal que aplica los filtros
		const applyFilters = () => {
			const searchTerm = searchInput.value.toLowerCase();

			componentCards.forEach((card) => {
				const cardTitle = card.dataset.title?.toLowerCase() || "";
				const cardTech = card.dataset.tech || "";

				const matchesSearch = cardTitle.includes(searchTerm);
				const matchesTech =
					currentTechFilter === "all" ||
					cardTech === currentTechFilter;

				if (matchesSearch && matchesTech) {
					card.style.display = "grid";
				} else {
					card.style.display = "none";
				}
			});
		};

		// Lógica para la barra de búsqueda
		searchInput.addEventListener("input", applyFilters);

		// Lógica para los botones de filtro
		filterButtons.forEach((button) => {
			button.addEventListener("click", () => {
				filterButtons.forEach((btn) =>
					btn.classList.remove("btn-primary"),
				);
				button.classList.add("btn-primary");

				currentTechFilter = button.dataset.tech || "all";
				applyFilters();
			});
		});
	}

	// Ejecutamos la función de configuración
	setupFilters();
</script>
